doctype html
html(lang='en')
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=1024')
    meta(name='apple-mobile-web-app-capable', content='yes')
    title Design a Design System | Davide Di Pumpo
    link(href='styles/main.css', rel='stylesheet')
    link(rel='shortcut icon', href='favicon.png')
    link(rel='apple-touch-icon', href='apple-touch-icon.png')
  body.impress-not-supported
    #impress
      #title.step(
        data-x='0'
        data-y='0'
      )

      #whoami.step(
        data-x='300'
        data-y='300'
        data-rotate-x='-90'
        data-rotate-y='-90'
        data-z='1000'
        data-color='color-1'
      )
        .cont
          .me
            img(
              src='images/me.svg'
            )
          .text
            h1 who am I?
            ul
              li - Creative Technologist
              li - Digital Architect @ Objectway
              li - I love: Graphic novels, competitive videogames and cats
              li - You can find me on the internet as
                strong &nbsp; MakhBeth

      #letstart.step(
        data-x='600'
        data-y='800'
      )

      #beginning.step(
        data-x='1200'
        data-y='1200'
        data-rotate-x='-90'
        data-rotate-y='-90'
        data-z='3000'
      )
        p.text In the beginning was the&nbsp;
          span.word Word
          span.page &nbsp;Page!
        p.cit
          span.tizio John 1:1
          span.almost almost&nbsp;

      #beginning2.step(
        data-x='1200'
        data-y='1200'
        data-rotate-x='-90'
        data-rotate-y='-90'
        data-z='3000'
      )
        p.text In the beginning was the&nbsp;
          span.word Word
          span.page &nbsp;Page!
        p.cit
          span.tizio John 1:1
          span.almost &nbsp;almost

      #Tim.step(
        data-x='1800'
        data-y='1200'
        data-rotate-x='-90'
        data-rotate-y='-90'
        data-z='-200'
      )
        h1 Tim Berners Lee
        p invented the World Wide Web to share&nbsp;
          strong DOCUMENTS
          |.

      #floppy.step(
        data-x='1800'
        data-y='-200'
        data-rotate-x='-90'
        data-rotate-y='-90'
        data-z='-200'
      )
        img(
          src="images/floppy.svg"
        )

      #beyond.step(
        data-x='1800'
        data-y='1000'
        data-rotate-x='90'
        data-rotate-y='90'
        data-z='-1400'
      )
        p But the web went
        h1 BEYOND

      #web2.step(
        data-x='1800'
        data-y='2200'
        data-rotate-x='90'
        data-rotate-y='90'
        data-z='-1400'
      )
        h1 Now we have
        ul
          li - Web 2.0
          li - Web Apps
          li - Facebook, Twitter, socials...
          li - AirBnB, Netflix, Uber...
          li - Your next big and beautiful project...

      #unfortunally.step(
        data-x='1800'
        data-y='2200'
        data-rotate-x='0'
        data-rotate-y='0'
        data-z='0'
      )
        h1 But unfortunately

      #loop.step(
        data-x='5800'
        data-y='2200'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='90'
        data-z='0'
      )
        .cont
          h1 Designers are<br>stuck in a loop

      #designpage.step(
        data-x='5800'
        data-y='2200'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='90'
        data-z='-5000'
        )
          p Continuing designing
          h1 pages

      #rescue.step(
        data-x='5800'
        data-y='-2000'
        data-rotate-x='90'
        data-rotate-y='-90'
        data-rotate-z='90'
        data-z='-7000'
      )

      #whatis.step(
        data-x='-2000'
        data-y='-2000'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='0'
      )
        p But what is a
        h1 Design System?

      #everything.step(
        data-x='-2000'
        data-y='0'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='0'
      )
        p Everything

      #everything2.step(
        data-x='-2000'
        data-y='260'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='0'
      )
        | “From typography, layouts and grids, colors, icons, components and coding conventions, to voice and tone, style-guide and documentation, a design system is bringing all of these together in a way that allows your entire team to learn, build, and grow.”
        br
        a.twitterCit(
          href="https://twitter.com/itsmeara"
          target="_blank"
        ) @itsMeAra

      #anathomy.step(
        data-x='-2000'
        data-y='2000'
        data-rotate-x='45'
        data-rotate-y='45'
        data-rotate-z='45'
        data-z='0'
      )

      #murder.step(
        data-x='-4000'
        data-y='4000'
        data-rotate-x='45'
        data-rotate-y='180'
        data-rotate-z='180'
        data-z='1000'
      )
        h1 How to get away with
        h1 Murder?

      #atomic.step(
        data-x='-4000'
        data-y='4400'
        data-rotate-x='45'
        data-rotate-y='180'
        data-rotate-z='180'
        data-z='100'
      )
        h1 Atomic design

      #atomic-image.step(
        data-x='-4000'
        data-y='4370'
        data-rotate-x='45'
        data-rotate-y='180'
        data-rotate-z='180'
        data-z='-100'
      )
        img(
          src="images/atomic-design.svg"
        )

      #brad-frost.step(
        data-x='-4000'
        data-y='4170'
        data-rotate-x='45'
        data-rotate-y='180'
        data-rotate-z='180'
        data-z='-150'
      )
        h1
          a(
            href="http://atomicdesign.bradfrost.com/"
            target="_blank"
          ) Brad Frost

      #atomic-example.step(
        data-x='-6000'
        data-y='4270'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='-150'
      )
        h1 Example

      #atomic-example1.step(
        data-x='-6000'
        data-y='4370'
        data-rotate-x='0'
        data-rotate-y='-45'
        data-rotate-z='0'
        data-z='-150'
      )
        img(src="images/at1.png")


      #atomic-example2.step(
        data-x='-6000'
        data-y='4470'
        data-rotate-x='0'
        data-rotate-y='-90'
        data-rotate-z='0'
        data-z='-150'
      )
        img(src="images/at2.png")


      #atomic-example3.step(
        data-x='-6000'
        data-y='4570'
        data-rotate-x='0'
        data-rotate-y='-135'
        data-rotate-z='0'
        data-z='-150'
      )
        img(src="images/at3.png")


      #atomic-example4.step(
        data-x='-6000'
        data-y='4670'
        data-rotate-x='0'
        data-rotate-y='-180'
        data-rotate-z='0'
        data-z='-150'
      )
        img(src="images/at4.png")


      #atomic-example5.step(
        data-x='-6000'
        data-y='4770'
        data-rotate-x='0'
        data-rotate-y='-225'
        data-rotate-z='0'
        data-z='-150'
      )
        img(src="images/at5.png")


      #where-to-start.step(
        data-x='-6000'
        data-y='6770'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='-150'
      )
        h1 Where to start?

      #cases.step(
        data-x='-7000'
        data-y='8770'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='-150'
      )
        div
          img(
            src="images/ballon1.svg"
          )
          img(
            src="images/ballon2.svg"
          )
        h1 The design already exists
      #cases-1.step(
        data-x='-7000'
        data-y='8770'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='-150'
      )
        div
          img(
            src="images/ballon1.svg"
          )
          img(
            src="images/ballon2.svg"
          )
        h1 The design already exists

      #screenshot-exercise.step(
        data-x='-7000'
        data-y='10000'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='-150'
      )
        h1 The screenshots exercise

      #screenshot-exercise-image.step(
        data-x='-7000'
        data-y='10000'
        data-rotate-x='90'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='1000'
      )
        img(
          src="images/screenshotbutton.png"
        )

      #rules-0.step(
        data-x='-7000'
        data-y='12000'
        data-rotate-x='90'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='1000'
      )
        h1 rules

      #rules-1.step(
        data-x='-7000'
        data-y='12000'
        data-rotate-x='90'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='1000'
      )
        h1 rules
        ul
          li 1. Function not aesthetic

      #rules-2.step(
        data-x='-7000'
        data-y='12000'
        data-rotate-x='90'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='1000'
      )
        h1 rules
        ul
          li 1. Function not aesthetic
          li 2. Name things

      #rules-3.step(
        data-x='-7000'
        data-y='12000'
        data-rotate-x='90'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='1000'
      )
        h1 rules
        ul
          li 1. Function not aesthetic
          li 2. Name things
          li 3. Keep consistency

      #rules-4.step(
        data-x='-7000'
        data-y='12000'
        data-rotate-x='90'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='1000'
      )
        h1 rules
        ul
          li 1. Function not aesthetic
          li 2. Name things
          li 3. Keep consistency
          li 4.
            strong  MAKE IT A COMMON LANGUAGE!



      #cases-2.step(
        data-x='-10000'
        data-y='0'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='0'
      )
        div
          img(
            src="images/ballon2.svg"
          )
        h1 You have to design everything

      #scratch-0.step(
        data-x='-10000'
        data-y='2000'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='0'
      )
        h1 Don't start from buttons

      #scratch-1.step(
        data-x='-10000'
        data-y='4000'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='0'
      )
        h1 Design the old way

      #scratch-2.step(
        data-x='-10000'
        data-y='6000'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='0'
      )
        h1 Old way?
        ul
          li 1. Sketch the site / application
          li 2. Understand the functions
          li 3. Find the content areas
          li 4. Find the look and feel


      #scratch-3.step(
        data-x='-10000'
        data-y='8000'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='0'
      )
        h1 It's ok to design an old way mockup

      #scratch-4.step(
        data-x='-10000'
        data-y='8000'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='0'
      )
        h1 It's ok to design an old way mockup
        h1 B U T

      #scratch-5.step(
        data-x='-10000'
        data-y='10000'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='0'
      )
        h1 HIDE IT!

      #scratch-6.step(
        data-x='-10000'
        data-y='12000'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='0'
      )
        h1 Don't set up wrong
          strong  expectations!

      #StephenHay.step.twitter(
        data-x='-10000'
        data-y='14000'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='90'
        data-z='1000'
      )
        .twitterCont
          .twitterText.
            “Photoshop composition is the most effective way to show your clients what their website will never look like.”
          a.twitterCit(
            href="https://twitter.com/stephenhay"
            target="_blank"
          ) @stephenhay


      #WhatPresent.step(
        data-x='-15000'
        data-y='0'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='0'
      )
        h1 How to show
          strong  my work?

      #wireframes.step(
        data-x='-15000'
        data-y='1000'
        data-rotate-x='0'
        data-rotate-y='180'
        data-rotate-z='0'
        data-z='0'
      )
        h1 Wireframes
        img(
          src="images/wireframe.png"
        )

      #guidelines.step(
        data-x='-15000'
        data-y='2000'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='0'
      )
        h1 Style-guides
        img(
          src="images/styleguide.jpg"
        )

      #styletile.step(
        data-x='-15000'
        data-y='3000'
        data-rotate-x='0'
        data-rotate-y='180'
        data-rotate-z='0'
        data-z='0'
      )
        img(
          src="images/styletile.png"
        )
        img(
          src="images/examiner.jpg"
        )


      #MrkBolton.step.twitter(
        data-x='-15000'
        data-y='5000'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='0'
      )
        .twitterCont
          .twitterText.
            U can create good experiences without knowing contents. What you can’t do is create good experiences without knowing your content structure
          a.twitterCit(
            href="http://www.markboulton.co.uk/journal/structure-first-content-always"
            target="_blank"
          ) Mark Bolton

      #LayoutHints.step(
        data-x='-15000'
        data-y='7000'
        data-rotate-x='0'
        data-rotate-y='180'
        data-rotate-z='0'
        data-z='0'
      )
        h1 What about layout, white space etc?


      #Alla.step.twitter(
        data-x='-15000'
        data-y='8000'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='0'
      )
        .twitterCont
          .twitterText.
            Some designers loves generous spacing. Others prefer it more cosy. What do I do...?
          a.twitterCit(
            href="https://twitter.com/craftui"
            target="_blank"
          ) Alla Kholmatova - @craftui

      #LayoutHints-0.step(
        data-x='-15000'
        data-y='9000'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='0'
      )
        h1 You have to choose!
        ul
          li 1. Choose a Grid and gutters for horizontal space
          li 2. Choose a way to define the

      #LayoutHints-1.step(
        data-x='-15000'
        data-y='10000'
        data-rotate-x='0'
        data-rotate-y='180'
        data-rotate-z='0'
        data-z='0'
      )
        h1 Grids:
        p Something like Bootstrap, Foundation, Susy, Super-GiGi, 960.gs etc..



      #LayoutHints-2.step(
        data-x='-15000'
        data-y='11000'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='0'
      )
        h1 Vertical Rhythm
        img(
          src="images/alla.png"
          style="max-height: 90vh"
        )
        small(
          style="float: right; font-size: 0.8rem"
        ) Image courtesy of Alla Kholmatova

      #LayoutHints-3.step(
        data-x='-15000'
        data-y='12000'
        data-rotate-x='0'
        data-rotate-y='180'
        data-rotate-z='0'
        data-z='0'
      )
        h1 Vertical Rhythm
        img(
          src="images/gutenberg.png"
          style="max-height: 90vh"
        )


      #LastHints-4.step(
        data-x='-15000'
        data-y='14000'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='0'
      )
        h1 Last Hints
        ul
          li - Make it official.
          li - Make it maintainable.
          li - Make it cross-disciplinary.
          li - Make it last.

      #Paul.step.twitter(
        data-x='-15000'
        data-y='18000'
        data-rotate-x='0'
        data-rotate-y='180'
        data-rotate-z='0'
        data-z='0'
      )
        .twitterCont
          .twitterText.
            Make it GREATER, not bigger.
          a.twitterCit(
            href="https://twitter.com/craftui"
            target="_blank") Paul Jesus Benites Romero

      #LastHints-6.step(
        data-x='-15000'
        data-y='20000'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='0'
      )
        h1 Remember
        p A Design system is a
          strong  product
          |  that will serve other products


      #Boss.step(
        data-x='-20000'
        data-y='0'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='0'
      )
        img(
          src="images/boss.svg"
        )


      #Boss-0.step.twitter(
        data-x='-20000'
        data-y='-3000'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='90'
        data-z='0'
      )
        .twitterCont
          .twitterText.
            It’s Better to Beg for Forgiveness than to Ask for Permission

      #Boss-1.step(
        data-x='-20000'
        data-y='-6000'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='180'
        data-z='0'
      )
        h1 Ask only that:
        p “Do you like to save time and money?”

      #Boss-2.step(
        data-x='-20000'
        data-y='-9000'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='270'
        data-z='0'
      )
        h1 A Design system
        ul
          li - Speeds up workflow
          li - Establishes shared vocabularies
          li - Creates collaborative workflows
          li - Makes testing easier

      #Boss-3.step(
        data-x='-20000'
        data-y='-12000'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='0'
      )
        p.
          Every organization is finally realizing that bulldozing their entire website and replacing it with a New-And-Shiny™ website every three-to-eight years isn’t (and never was) an optimal solution.



      #Boss-4.step(
        data-x='-20000'
        data-y='-15000'
        data-rotate-x='0'
        data-rotate-y='90'
        data-rotate-z='0'
        data-z='0'
      )
        h1 Open Source Design Systems
        ul
          li
            a(
              href="http://origami.ft.com"
              target="_blank"
            ) Origami
            small  -   Financial Times
          li
            a(
              href="https://github.com/salesforce-ux/design-system"
              target="_blank"
            ) Lightning
            small  -  Sales Force
          li
            a(
              href="https://getmdl.io"
              target="_blank"
            ) Material Design
            small  -  Google
          li
            a(
              href="http://www.bbc.co.uk/gel"
              target="_blank"
            ) GEL
            small  -  BBC

      #Last.step(
        data-x='12000'
        data-y='0'
        data-rotate-x='0'
        data-rotate-y='180'
        data-rotate-z='0'
        data-z='0'
      )
        h1 One last thing

      #Saul.step.twitter(
        data-x='0'
        data-y='0'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='-5000'
      )
        .twitterCont
          .twitterText.
            Design is thinking made visual
          a.twitterCit(
            href="https://en.wikipedia.org/wiki/Saul_Bass"
            target="_blank"
          ) Saul Bass

      #end.step(
        data-x='0'
        data-y='0'
        data-rotate-x='0'
        data-rotate-y='0'
        data-rotate-z='0'
        data-z='10000'
      )
        img(
          src="images/end.svg"
        )
      //
        The `id` attribute of the step element is used to identify it in the URL, but it's optional.
        If it is not defined, it will get a default value of `step-N` where N is a number of slide.
        So in the example below it'll be `step-2`.
        The hash part of the url when this step is active will be `#/step-2`.
        You can also use `#step-2` in a link, to point directly to this particular step.
        Please note, that while `#/step-2` (with slash) would also work in a link it's not recommended.
        Using classic `id`-based links like `#step-2` makes these links usable also in fallback mode.
    //-
      .step.slide(data-x='0', data-y='-1500')
        q
          | Don’t you think that presentations given
          strong in modern browsers
          |  shouldn’t
          strong copy the limits
          |  of ‘classic’ slide decks?
      .step.slide(data-x='1000', data-y='-1500')
        q
          | Would you like to
          strong impress your audience
          |  with
          strong stunning visualization
          |  of your talk?
      //
        This is an example of step element being scaled.
        Again, we use a `data-` attribute, this time it's `data-scale="4"`, so it means that this
        element will be 4 times larger than the others.
        From presentation and transitions point of view it means, that it will have to be scaled
        down (4 times) to make it back to its correct size.
      #title.step(data-x='0', data-y='0', data-scale='4')
        span.try then you should try
        h1
          | impress.js
          sup *
        span.footnote
          sup *
          |  no rhyme intended
      //
        This element introduces rotation.
        Notation shouldn't be a surprise. We use `data-rotate="90"` attribute, meaning that this
        element should be rotated by 90 degrees clockwise.
      #its.step(data-x='850', data-y='3000', data-rotate='90', data-scale='5')
        p
          | It’s a
          strong presentation tool
          br
          |         inspired by the idea behind
          a(href='http://prezi.com') prezi.com
          br
          |         and based on the
          strong power of CSS3 transforms and transitions
          |  in modern browsers.
      #big.step(data-x='3500', data-y='2100', data-rotate='180', data-scale='6')
        p
          | visualize your
          b big
          span.thoughts thoughts
      //
        And now it gets really exciting! We move into third dimension!
        Along with `data-x` and `data-y`, you can define the position on third (Z) axis, with
        `data-z`. In the example below we use `data-z="-3000"` meaning that element should be
        positioned far away from us (by 3000px).
      #tiny.step(data-x='2825', data-y='2325', data-z='-3000', data-rotate='300', data-scale='1')
        p
          | and
          b tiny
          |  ideas
      //
        This step here doesn't introduce anything new when it comes to data attributes, but you
        should notice in the demo that some words of this text are being animated.
        It's a very basic CSS transition that is applied to the elements when this step element is
        reached.
        At the very beginning of the presentation all step elements are given the class of `future`.
        It means that they haven't been visited yet.
        When the presentation moves to given step `future` is changed to `present` class name.
        That's how animation on this step works - text moves when the step has `present` class.
        Finally when the step is left the `present` class is removed from the element and `past`
        class is added.
        So basically every step element has one of three classes: `future`, `present` and `past`.
        Only one current step has the `present` class.
      #ing.step(data-x='3500', data-y='-850', data-rotate='270', data-scale='6')
        p
          | by
          b.positioning positioning
          | ,
          b.rotating rotating
          |  and
          b.scaling scaling
          |  them on an infinite canvas
      #imagination.step(data-x='6700', data-y='-300', data-scale='6')
        p
          | the only
          b limit
          |  is your
          b.imagination imagination
      #source.step(data-x='6300', data-y='2000', data-rotate='20', data-scale='4')
        p want to know more?
        q
          a(href='http://github.com/bartaz/impress.js') use the source
          | , Luke!
      #one-more-thing.step(data-x='6000', data-y='4000', data-scale='2')
        p one more thing...
      //
        And the last one shows full power and flexibility of impress.js.
        You can not only position element in 3D, but also rotate it around any axis.
        So this one here will get rotated by -40 degrees (40 degrees anticlockwise) around X axis and
        10 degrees (clockwise) around Y axis.
        You can of course rotate it around Z axis with `data-rotate-z` - it has exactly the same effect
        as `data-rotate` (these two are basically aliases).
      #its-in-3d.step(data-x='6200', data-y='4300', data-z='-100', data-rotate-x='-40', data-rotate-y='10', data-scale='2')
        p
          span.have have
          span.you you
          span.noticed noticed
          span.its it’s
          span.in in
          b
            | 3D
            sup *
          | ?
        span.footnote * beat that, prezi ;)
      //
        So to summarize of all the possible attributes used to position presentation steps, we have:
        * `data-x`, `data-y`, `data-z` - they define the position of **the center** of step element on
        the canvas in pixels; their default value is 0;
        * `data-rotate-x`, `data-rotate-y`, 'data-rotate-z`, `data-rotate` - they define the rotation of
        the element around given axis in degrees; their default value is 0; `data-rotate` and `data-rotate-z`
        are exactly the same;
        * `data-scale` - defines the scale of step element; default value is 1
        These values are used by impress.js in CSS transformation functions, so for more information consult
        CSS transfrom docs: https://developer.mozilla.org/en/CSS/transform
      #overview.step(data-x='3000', data-y='1500', data-scale='10')
    //
      Hint is not related to impress.js in any way.
      But it can show you how to use impress.js features in creative way.
      When the presentation step is shown (selected) its element gets the class of "active" and the body element
      gets the class based on active step id `impress-on-ID` (where ID is the step's id)... It may not be
      so clear because of all these "ids" in previous sentence, so for example when the first step (the one with
      the id of `bored`) is active, body element gets a class of `impress-on-bored`.
      This class is used by this hint below. Check CSS file to see how it's shown with delayed CSS animation when
      the first step of presentation is visible for a couple of seconds.
      ...
      And when it comes to this piece of JavaScript below ... kids, don't do this at home ;)
      It's just a quick and dirty workaround to get different hint text for touch devices.
      In a real world it should be at least placed in separate JS file ... and the touch content should be
      probably just hidden somewhere in HTML - not hard-coded in the script.
      Just sayin' ;)
    //
      Last, but not least.
      To make all described above really work, you need to include impress.js in the page.
      I strongly encourage to minify it first.
      In here I just include full source of the script to make it more readable.
      You also need to call a `impress().init()` function to initialize impress.js presentation.
      And you should do it in the end of your document. Not only because it's a good practice, but also
      because it should be done when the whole document is ready.
      Of course you can wrap it in any kind of "DOM ready" event, but I was too lazy to do so ;)
    script(src='scripts/main.js')
    script.
      impress().init();
    //
      The `impress()` function also gives you access to the API that controls the presentation.
      Just store the result of the call:
      var api = impress();
      and you will get three functions you can call:
      `api.init()` - initializes the presentation,
      `api.next()` - moves to next step of the presentation,
      `api.prev()` - moves to previous step of the presentation,
      `api.goto( stepIndex | stepElementId | stepElement, [duration] )` - moves the presentation to the step given by its index number
      id or the DOM element; second parameter can be used to define duration of the transition in ms,
      but it's optional - if not provided default transition duration for the presentation will be used.
      You can also simply call `impress()` again to get the API, so `impress().next()` is also allowed.
      Don't worry, it wont initialize the presentation again.
      For some example uses of this API check the last part of the source of impress.js where the API
      is used in event handlers.
//
  Now you know more or less everything you need to build your first impress.js presentation, but before
  you start...
  Oh, you've already cloned the code from GitHub?
  You have it open in text editor?
  Stop right there!
  That's not how you create awesome presentations. This is only a code. Implementation of the idea that
  first needs to grow in your mind.
  So if you want to build great presentation take a pencil and piece of paper. And turn off the computer.
  Sketch, draw and write. Brainstorm your ideas on a paper. Try to build a mind-map of what you'd like
  to present. It will get you closer and closer to the layout you'll build later with impress.js.
  Get back to the code only when you have your presentation ready on a paper. It doesn't make sense to do
  it earlier, because you'll only waste your time fighting with positioning of useless points.
  If you think I'm crazy, please put your hands on a book called "Presentation Zen". It's all about
  creating awesome and engaging presentations.
  Think about it. 'Cause impress.js may not help you, if you have nothing interesting to say.
//
  Are you still reading this?
  For real?
  I'm impressed! Feel free to let me know that you got that far (I'm @bartaz on Twitter), 'cause I'd like
  to congratulate you personally :)
  But you don't have to do it now. Take my advice and take some time off. Make yourself a cup of coffee, tea,
  or anything you like to drink. And raise a glass for me ;)
  Cheers!
